// Code generated by mockery v2.45.0. DO NOT EDIT.

//go:build !compile

package exchange

import mock "github.com/stretchr/testify/mock"

// MockConnectionQueue is an autogenerated mock type for the ConnectionQueue type
type MockConnectionQueue struct {
	mock.Mock
}

type MockConnectionQueue_Expecter struct {
	mock *mock.Mock
}

func (_m *MockConnectionQueue) EXPECT() *MockConnectionQueue_Expecter {
	return &MockConnectionQueue_Expecter{mock: &_m.Mock}
}

// AddConnection provides a mock function with given fields: id, conn
func (_m *MockConnectionQueue) AddConnection(id uint64, conn ConnResult) error {
	ret := _m.Called(id, conn)

	if len(ret) == 0 {
		panic("no return value specified for AddConnection")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uint64, ConnResult) error); ok {
		r0 = rf(id, conn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockConnectionQueue_AddConnection_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddConnection'
type MockConnectionQueue_AddConnection_Call struct {
	*mock.Call
}

// AddConnection is a helper method to define mock.On call
//   - id uint64
//   - conn ConnResult
func (_e *MockConnectionQueue_Expecter) AddConnection(id interface{}, conn interface{}) *MockConnectionQueue_AddConnection_Call {
	return &MockConnectionQueue_AddConnection_Call{Call: _e.mock.On("AddConnection", id, conn)}
}

func (_c *MockConnectionQueue_AddConnection_Call) Run(run func(id uint64, conn ConnResult)) *MockConnectionQueue_AddConnection_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint64), args[1].(ConnResult))
	})
	return _c
}

func (_c *MockConnectionQueue_AddConnection_Call) Return(_a0 error) *MockConnectionQueue_AddConnection_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockConnectionQueue_AddConnection_Call) RunAndReturn(run func(uint64, ConnResult) error) *MockConnectionQueue_AddConnection_Call {
	_c.Call.Return(run)
	return _c
}

// AddRequest provides a mock function with given fields: connChan
func (_m *MockConnectionQueue) AddRequest(connChan chan ConnResult) uint64 {
	ret := _m.Called(connChan)

	if len(ret) == 0 {
		panic("no return value specified for AddRequest")
	}

	var r0 uint64
	if rf, ok := ret.Get(0).(func(chan ConnResult) uint64); ok {
		r0 = rf(connChan)
	} else {
		r0 = ret.Get(0).(uint64)
	}

	return r0
}

// MockConnectionQueue_AddRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddRequest'
type MockConnectionQueue_AddRequest_Call struct {
	*mock.Call
}

// AddRequest is a helper method to define mock.On call
//   - connChan chan ConnResult
func (_e *MockConnectionQueue_Expecter) AddRequest(connChan interface{}) *MockConnectionQueue_AddRequest_Call {
	return &MockConnectionQueue_AddRequest_Call{Call: _e.mock.On("AddRequest", connChan)}
}

func (_c *MockConnectionQueue_AddRequest_Call) Run(run func(connChan chan ConnResult)) *MockConnectionQueue_AddRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(chan ConnResult))
	})
	return _c
}

func (_c *MockConnectionQueue_AddRequest_Call) Return(_a0 uint64) *MockConnectionQueue_AddRequest_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockConnectionQueue_AddRequest_Call) RunAndReturn(run func(chan ConnResult) uint64) *MockConnectionQueue_AddRequest_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockConnectionQueue creates a new instance of MockConnectionQueue. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockConnectionQueue(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockConnectionQueue {
	mock := &MockConnectionQueue{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

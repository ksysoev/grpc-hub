// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// ExchangeServiceClient is the client API for ExchangeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ExchangeServiceClient interface {
	RegisterService(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (ExchangeService_RegisterServiceClient, error)
}

type exchangeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewExchangeServiceClient(cc grpc.ClientConnInterface) ExchangeServiceClient {
	return &exchangeServiceClient{cc}
}

var exchangeServiceRegisterServiceStreamDesc = &grpc.StreamDesc{
	StreamName:    "RegisterService",
	ServerStreams: true,
}

func (c *exchangeServiceClient) RegisterService(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (ExchangeService_RegisterServiceClient, error) {
	stream, err := c.cc.NewStream(ctx, exchangeServiceRegisterServiceStreamDesc, "/api.ExchangeService/RegisterService", opts...)
	if err != nil {
		return nil, err
	}
	x := &exchangeServiceRegisterServiceClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ExchangeService_RegisterServiceClient interface {
	Recv() (*ServerCommands, error)
	grpc.ClientStream
}

type exchangeServiceRegisterServiceClient struct {
	grpc.ClientStream
}

func (x *exchangeServiceRegisterServiceClient) Recv() (*ServerCommands, error) {
	m := new(ServerCommands)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ExchangeServiceService is the service API for ExchangeService service.
// Fields should be assigned to their respective handler implementations only before
// RegisterExchangeServiceService is called.  Any unassigned fields will result in the
// handler for that method returning an Unimplemented error.
type ExchangeServiceService struct {
	RegisterService func(*RegisterRequest, ExchangeService_RegisterServiceServer) error
}

func (s *ExchangeServiceService) registerService(_ interface{}, stream grpc.ServerStream) error {
	m := new(RegisterRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return s.RegisterService(m, &exchangeServiceRegisterServiceServer{stream})
}

type ExchangeService_RegisterServiceServer interface {
	Send(*ServerCommands) error
	grpc.ServerStream
}

type exchangeServiceRegisterServiceServer struct {
	grpc.ServerStream
}

func (x *exchangeServiceRegisterServiceServer) Send(m *ServerCommands) error {
	return x.ServerStream.SendMsg(m)
}

// RegisterExchangeServiceService registers a service implementation with a gRPC server.
func RegisterExchangeServiceService(s grpc.ServiceRegistrar, srv *ExchangeServiceService) {
	srvCopy := *srv
	if srvCopy.RegisterService == nil {
		srvCopy.RegisterService = func(*RegisterRequest, ExchangeService_RegisterServiceServer) error {
			return status.Errorf(codes.Unimplemented, "method RegisterService not implemented")
		}
	}
	sd := grpc.ServiceDesc{
		ServiceName: "api.ExchangeService",
		Methods:     []grpc.MethodDesc{},
		Streams: []grpc.StreamDesc{
			{
				StreamName:    "RegisterService",
				Handler:       srvCopy.registerService,
				ServerStreams: true,
			},
		},
		Metadata: "exchange.proto",
	}

	s.RegisterService(&sd, nil)
}

// NewExchangeServiceService creates a new ExchangeServiceService containing the
// implemented methods of the ExchangeService service in s.  Any unimplemented
// methods will result in the gRPC server returning an UNIMPLEMENTED status to the client.
// This includes situations where the method handler is misspelled or has the wrong
// signature.  For this reason, this function should be used with great care and
// is not recommended to be used by most users.
func NewExchangeServiceService(s interface{}) *ExchangeServiceService {
	ns := &ExchangeServiceService{}
	if h, ok := s.(interface {
		RegisterService(*RegisterRequest, ExchangeService_RegisterServiceServer) error
	}); ok {
		ns.RegisterService = h.RegisterService
	}
	return ns
}

// UnstableExchangeServiceService is the service API for ExchangeService service.
// New methods may be added to this interface if they are added to the service
// definition, which is not a backward-compatible change.  For this reason,
// use of this type is not recommended.
type UnstableExchangeServiceService interface {
	RegisterService(*RegisterRequest, ExchangeService_RegisterServiceServer) error
}
